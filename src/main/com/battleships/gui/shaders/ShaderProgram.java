package com.battleships.gui.shaders;

import org.joml.Matrix4f;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL20;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.FloatBuffer;

/**
 * Every shader should extend this ShaderProgram. Contains all the necessary methods every shader needs to have.
 *
 * @author Tim Staudenmaier
 */
public abstract class ShaderProgram {

    /**
     * Buffer needed to load matrices to uniform variables.
     */
    private static FloatBuffer matrixBuffer = BufferUtils.createFloatBuffer(16);
    /**
     * ID of this shaderProgram.
     */
    private int programID;
    /**
     * ID of the vertex shader of this program.
     */
    private int vertexShaderID;
    /**
     * ID of the fragment shader of this program.
     */
    private int fragmentShaderID;

    /**
     * Create a new OpenGL Shader program that uses the two specified shader files.
     *
     * @param vertexFile   Path to the vertex file the shader should use.
     * @param fragmentFile Path to the fragment file the shader should use.
     */
    public ShaderProgram(String vertexFile, String fragmentFile) {
        //get shader ids
        vertexShaderID = loadShader(vertexFile, GL20.GL_VERTEX_SHADER);
        fragmentShaderID = loadShader(fragmentFile, GL20.GL_FRAGMENT_SHADER);
        //create new program with the id programID
        programID = GL20.glCreateProgram();
        //attack shaders to new program
        GL20.glAttachShader(programID, vertexShaderID);
        GL20.glAttachShader(programID, fragmentShaderID);

        bindAttributes();
        GL20.glLinkProgram(programID);
        GL20.glValidateProgram(programID);
        getAllUniformLocations();
    }

    /**
     * Load a shader from a shader file.
     *
     * @param file File containing the shader.
     * @param type OpenGl type of the shader.
     * @return ID of the loaded shader.
     */
    private static int loadShader(String file, int type) {
        StringBuilder shaderSource = new StringBuilder();
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(ShaderProgram.class.getResourceAsStream(file)));
            String line;
            while ((line = reader.readLine()) != null) {
                shaderSource.append(line).append("//\n");
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(-1);
        }
        int shaderID = GL20.glCreateShader(type);
        GL20.glShaderSource(shaderID, shaderSource);
        GL20.glCompileShader(shaderID);
        if (GL20.glGetShaderi(shaderID, GL20.GL_COMPILE_STATUS) == GL11.GL_FALSE) {
            System.out.println(GL20.glGetShaderInfoLog(shaderID, 500));
            System.err.println("Could not compile shader!");
            System.exit(-1);
        }
        return shaderID;
    }

    /**
     * Uniform variables are variables, that are accessible both in the java code and in the
     * shader code. Their values can be set in java code and then be read when the shader renders an object.
     * Their values need to be saved to a location index, so the shader knows where to find the value for the variable.
     * These location indices are generated by OpenGL. This method generates all the location-values so all uniform
     * variables can be saved and accessed by the shader.
     */
    protected abstract void getAllUniformLocations();

    /**
     * Gets the location at which a specific uniform variable needs to be saved.
     *
     * @param uniformName Name of the uniform variable of which the location is needed.
     * @return Location of the uniform variable.
     */
    protected int getUniformLocation(String uniformName) {
        return GL20.glGetUniformLocation(programID, uniformName);
    }

    /**
     * Starts this shader program.
     */
    public void start() {
        //start program in OpenGL
        GL20.glUseProgram(programID);
    }

    /**
     * Stops this shader program.
     */
    public void stop() {
        //stop program
        GL20.glUseProgram(0);
    }

    /**
     * Cleans up this shader program.
     * Needs to be called on program exit.
     */
    public void cleanUp() {
        //stop shaders, detach them and delete shaders and this program
        stop();
        GL20.glDetachShader(programID, vertexShaderID);
        GL20.glDetachShader(programID, fragmentShaderID);
        GL20.glDeleteShader(vertexShaderID);
        GL20.glDeleteShader(fragmentShaderID);
        GL20.glDeleteProgram(programID);
    }

    /**
     * Binds the attributes to the shader.
     * If a model is rendered, it's vertex array object gets loaded. This vao contains
     * the attributes for a model, these need to be in the same order as the attributes this shader uses.
     * The attributes are then passed to the vertexShader as "in values", so it can process them.
     * The first attribute in the vao will be treated as the position for the entity, the second as textureCorrds, ...
     */
    protected abstract void bindAttributes();

    /**
     * Bind an attribute to a variable name in the shader.
     *
     * @param attribute    ID of the attribute that should be bound.
     * @param variableName Name of the variable in the shader for this attribute
     */
    protected void bindAttribute(int attribute, String variableName) {
        GL20.glBindAttribLocation(programID, attribute, variableName);
    }

    /**
     * Load a float value into a uniform variable using its location.
     *
     * @param location Location of the uniform variable the value should be loaded to.
     * @param value    Value that should be loaded.
     */
    protected void loadFloat(int location, float value) {
        GL20.glUniform1f(location, value);
    }

    /**
     * Load a int value into a uniform variable using its location.
     *
     * @param location Location of the uniform variable the value should be loaded to.
     * @param value    Value that should be loaded.
     */
    protected void loadInt(int location, int value) {
        GL20.glUniform1i(location, value);
    }

    /**
     * Load a 3D vector into a uniform variable using its location.
     *
     * @param location Location of the uniform variable the vector should be loaded to.
     * @param vector   Vector that should be loaded.
     */
    protected void loadVector(int location, Vector3f vector) {
        GL20.glUniform3f(location, vector.x, vector.y, vector.z);
    }

    /**
     * Load a 4D vector into a uniform variable using its location.
     *
     * @param location Location of the uniform variable the vector should be loaded to.
     * @param vector   Vector that should be loaded.
     */
    protected void loadVector(int location, Vector4f vector) {
        GL20.glUniform4f(location, vector.x, vector.y, vector.z, vector.w);
    }

    /**
     * Load a 2D vector into a uniform variable using its location.
     *
     * @param location Location of the uniform variable the vector should be loaded to.
     * @param vector   Vector that should be loaded.
     */
    protected void load2DVector(int location, Vector2f vector) {
        GL20.glUniform2f(location, vector.x, vector.y);
    }

    /**
     * Load a boolean into a uniform variable using its location.
     *
     * @param location Location of the uniform variable the boolean should be loaded to.
     * @param value    value of the boolean that should be loaded.
     */
    protected void loadBoolean(int location, boolean value) {
        float toLoad = 0;
        if (value)
            toLoad = 1;
        GL20.glUniform1f(location, toLoad);
    }

    /**
     * Load a 4D matrix into a uniform variable using its location.
     *
     * @param location Location of the uniform variable the matrix should be loaded to.
     * @param matrix   Matrix that should be loaded.
     */
    protected void loadMatrix(int location, Matrix4f matrix) {
        //upload float values from Matrix one by one
        //first load into MATRIX_BUFFER so it's possible to upload one by one
        GL20.glUniformMatrix4fv(location, false, matrix.get(matrixBuffer));
    }
}
