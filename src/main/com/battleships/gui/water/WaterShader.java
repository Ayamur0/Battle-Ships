package com.battleships.gui.water;

import com.battleships.gui.entities.Camera;
import com.battleships.gui.entities.Light;
import com.battleships.gui.shaders.ShaderProgram;
import com.battleships.gui.toolbox.Maths;
import org.joml.Matrix4f;

/**
 * Shader used by the {@link WaterRenderer}.
 *
 * @author Tim Staudenmaier
 */
public class WaterShader extends ShaderProgram {

    /**
     * Path for the vertex shader file.
     */
    private final static String VERTEX_FILE = "/com/battleships/gui/water/waterVertexShader.glsl";
    /**
     * Path for the fragment shader file.
     */
    private final static String FRAGMENT_FILE = "/com/battleships/gui/water/waterFragmentShader.glsl";

    /**
     * Location value for the uniform variable modelMatrix, that holds the current transformationMatrix of the WaterTile.
     */
    private int location_modelMatrix;
    /**
     * Location value for the uniform variable viewMatrix, that holds the current viewMatrix of the camera.
     */
    private int location_viewMatrix;
    /**
     * Location value for the uniform variable projectionMatrix, that holds the current projectionMatrix of the window.
     */
    private int location_projectionMatrix;
    /**
     * Location value for the uniform variable reflectionTexture, that holds the Id for the reflectionTexture of the waterTile.
     */
    private int location_reflectionTexture;
    /**
     * Location value for the uniform variable refractionTexture, that holds the Id for the refractionTexture of the waterTile.
     */
    private int location_refractionTexture;
    /**
     * Location value for the uniform variable dudvMap, that holds the Id for the dudvMapTexture of the waterTile.
     */
    private int location_dudvMap;
    /**
     * Location value for the uniform variable moveFactor, that holds the moveFactor of the waves for the waterTile.
     */
    private int location_moveFactor;
    /**
     * Location value for the uniform variable cameraPosition, that holds the current position of the camera.
     */
    private int location_cameraPosition;
    /**
     * Location value for the uniform variable normalMap, that holds the Id for the normalMapTexture of the waterTile.
     */
    private int location_normalMap;
    /**
     * Location value for the uniform variable lightColor, that holds the color of the light lighting the scene.
     */
    private int location_lightColor;
    /**
     * Location value for the uniform variable lightPosition, that holds the position of the light lighting the scene.
     */
    private int location_lightPosition;
    /**
     * Location value for the uniform variable depthMap, that holds the Id for the depthMapTexture of the waterTile.
     */
    private int location_depthMap;
    /**
     * Location value for the uniform variable nearPlane, that holds the distance of the nearPlane from the camera.
     */
    private int location_nearPlane;
    /**
     * Location value for the uniform variable farPlane, that holds the distance of the farPlane from the camera.
     */
    private int location_farPlane;

    /**
     * Creates a new water shader by loading the two core shader files, need for this type of shader and binding them to
     * OpenGl so it can access these shader files.
     */
    public WaterShader() {
        super(VERTEX_FILE, FRAGMENT_FILE);
    }

    /**
     * Binds the attributes to the shader.
     * If a model is rendered, it's vertex array object gets loaded. This vao contains
     * 1 attribute for a skybox, the position. This attribute is then passed to the vertexShader as "in value", so it can be processed.
     */
    @Override
    protected void bindAttributes() {
        bindAttribute(0, "position");
    }

    /**
     * Uniform variables are variables, that are accessible both in the java code and in the
     * shader code. Their values can be set in java code and then be read when the shader renders an object.
     * Their values need to be saved to a location index, so the shader knows where to find the value for the variable.
     * These location indices are generated by OpenGL. This method generates all the location-values so all uniform
     * variables can be saved and accessed by the shader.
     */
    @Override
    protected void getAllUniformLocations() {
        location_projectionMatrix = getUniformLocation("projectionMatrix");
        location_viewMatrix = getUniformLocation("viewMatrix");
        location_modelMatrix = getUniformLocation("modelMatrix");
        location_reflectionTexture = getUniformLocation("reflectionTexture");
        location_refractionTexture = getUniformLocation("refractionTexture");
        location_dudvMap = getUniformLocation("dudvMap");
        location_moveFactor = getUniformLocation("moveFactor");
        location_cameraPosition = getUniformLocation("cameraPosition");
        location_normalMap = getUniformLocation("normalMap");
        location_lightColor = getUniformLocation("lightColor");
        location_lightPosition = getUniformLocation("lightPosition");
        location_depthMap = getUniformLocation("depthMap");
        location_nearPlane = getUniformLocation("nearPlane");
        location_farPlane = getUniformLocation("farPlane");
    }

    /**
     * Load distance of near and far plane from camera to shader.
     * Needed to calculate distance from a depth map.
     *
     * @param nearPlane - distance of near plane from camera
     * @param farPlane  - distance of far plane from camera
     */
    public void loadPlanes(float nearPlane, float farPlane) {
        super.loadFloat(location_nearPlane, nearPlane);
        super.loadFloat(location_farPlane, farPlane);
    }

    /**
     * Load the color and position of the "sun" the light that lights the whole scene
     * to the shader, so the water reflection can use it.
     *
     * @param sun - the main light of the scene
     */
    public void loadLight(Light sun) {
        super.loadVector(location_lightColor, sun.getColor());
        super.loadVector(location_lightPosition, sun.getPosition());
    }

    /**
     * Load the moveFactor to the shader.
     * The moveFactor moves the distortion texture around, so it looks like
     * the waves of the water are moving.
     *
     * @param factor - moveFactor to load
     */
    public void loadMoveFactor(float factor) {
        super.loadFloat(location_moveFactor, factor);
    }

    /**
     * Set sampler 2D for reflection texture to use texture bank 0
     * and the one for refraction texture to use texture bank 1.
     * The du/dv Map for the water movement is in texture bank 2
     * and the normal map for the water in 3.
     * The depthMap that represent how much water is between the camera and the
     * terrain under the water, is in texture unit 4.
     */
    public void connectTextureUnits() {
        super.loadInt(location_reflectionTexture, 0);
        super.loadInt(location_refractionTexture, 1);
        super.loadInt(location_dudvMap, 2);
        super.loadInt(location_normalMap, 3);
        super.loadInt(location_depthMap, 4);
    }

    /**
     * Loads the current projection Matrix.
     *
     * @param projection current projection Matrix, only changes if window is resized.
     */
    public void loadProjectionMatrix(Matrix4f projection) {
        loadMatrix(location_projectionMatrix, projection);
    }

    /**
     * Load viewMatrix to shader.
     * Also load camera position to shader, to determine if camera looks at water from above or from the side.
     * If looked at from the side water is more reflective.
     *
     * @param camera - the current camera that displays the scene
     */
    public void loadViewMatrix(Camera camera) {
        Matrix4f viewMatrix = Maths.createViewMatrix(camera);
        loadMatrix(location_viewMatrix, viewMatrix);
        super.loadVector(location_cameraPosition, camera.getPosition());
    }

    /**
     * Loads the transformation Matrix of the currently rendered WaterTile to the uniform variable.
     *
     * @param modelMatrix transformation matrix of the waterTile, containing position, rotation and scale.
     */
    public void loadTransformationMatrix(Matrix4f modelMatrix) {
        loadMatrix(location_modelMatrix, modelMatrix);
    }
}
