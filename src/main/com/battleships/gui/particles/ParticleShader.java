package com.battleships.gui.particles;

import com.battleships.gui.shaders.ShaderProgram;
import org.joml.Matrix4f;
import org.joml.Vector2f;

/**
 * Shader used by the {@link ParticleRenderer}.
 *
 * @author Tim Staudenmaier
 */
public class ParticleShader extends ShaderProgram {

    /**
     * Constants containing the paths to the shader files.
     */
    private static final String VERTEX_FILE = "/com/battleships/gui/particles/particleVertexShader.glsl";
    private static final String FRAGMENT_FILE = "/com/battleships/gui/particles/particleFragmentShader.glsl";

    /**
     * Location values for the uniform variables.
     */
    private int location_numberOfRows;
    private int location_projectionMatrix;

    /**
     * Initialize the shader for particles.
     * This shader uses the two specified glsl files.
     */
    public ParticleShader(){
        super(VERTEX_FILE, FRAGMENT_FILE);
    }

    /**
     * Uniform variables are variables, that are accessible both in the java code and in the
     * shader code. Their values can be set in java code and then be read when the shader renders an object.
     * Their values need to be saved to a location index, so the shader knows where to find the value for the variable.
     * These location indices are generated by OpenGL. This method generates all the location-values so all uniform
     * variables can be saved and accessed by the shader.
     */

    @Override
    protected void getAllUniformLocations() {
        location_projectionMatrix = super.getUniformLocation("projectionMatrix");
        location_numberOfRows = super.getUniformLocation("numberOfRows");
    }

    /**
     * Binds the attributes to the shader.
     * If a particle is rendered, it's vertex array object gets loaded. This vao contains
     * 4 attributes the position, viewMatrix, texOffsets and blendFactor.
     * These attributes are then passed to the vertexShader as "in values", so it can process them.
     */
    @Override
    protected void bindAttributes() {
        super.bindAttribute(0, "position");
        super.bindAttribute(1, "modelViewMatrix");
        super.bindAttribute(5, "texOffsets");
        super.bindAttribute(6, "blendFactor");
    }

    /**
     * Load number of rows to shader.
     * @param numberOfRows - number of rows of the current texture atlas
     */

    protected void loadNumberOfRows(float numberOfRows){
        super.loadFloat(location_numberOfRows, numberOfRows);
    }

    /**
     * Load a matrix as projectionMatrix for the shader.
     * @param projectionMatrix - Matrix to be loaded, is used to convert eye space to viewport space (2D screen)
     */

    protected void loadProjectionMatrix(Matrix4f projectionMatrix){
        super.loadMatrix(location_projectionMatrix, projectionMatrix);
    }
}